version: 2.1

orbs:
  vr: kohirens/version-release@3.1.0

parameters:
  alpine_version_file:
    default: alpine-latest-version.txt
    type: string
  glibc_version_file:
    default: glibc-latest-version.txt
    type: string
  secrets:
    default: kohirens-automation
    description: Secrets context
    type: string
  secrets_docker:
    default: kohirens-automation-dockerhub
    description: Secrets context
    type: string
  ssh_finger:
    description: SSH fingerprint.
    type: string
    default: "f0:13:c2:86:18:f4:18:93:d5:d7:31:cc:02:39:32:9e"
  triggered_flow:
    default: "workflow-selector"
    description: Workflow to be executed.
    type: string

# Anchors
executors:
  base:
    docker: # see https://circleci.com/developer/images/image/cimg/base#how-this-image-works
      - image: cimg/base:2023.04
        auth:
          username: ${DH_USER}
          password: ${DH_PASS}
    resource_class: small
  go-get-latest:
    docker: # see https://github.com/kohirens/go-get-latest
      - image: kohirens/go-get-latest:0.4.1
        auth:
          username: ${DH_USER}
          password: ${DH_PASS}
    resource_class: small

default-env-vars: &default-env-vars
    DH_IMG_REPO: "kohirens/alpine-glibc"
    DOCKER_BUILDKIT: 1
    ALPINE_VER: "3.19"
    GLIBC_VER: "2.39"
    AWS_VER: "v2"
    NODE_VER: "v20.2.0"
    NODE_DISTRO: "linux-x64"
    NODE_HOME: "/usr/local/lib/nodejs"

filter-semantic-tag: &filter-semantic-tag
  tags:
    only: /^v?\d+\.\d+\.\d+$/
  branches:
    ignore: /.*/

dynamic-env-vars: &dynamic-env-vars
    name: "Setup dynamic environment variables"
    command: |
      echo "export DH_IMG=${DH_IMG_REPO}:dev-${ALPINE_VER}-${GLIBC_VER}" >> $BASH_ENV
      # echo "export ALPINE_VER=$(cat << pipeline.parameters.alpine_version_file >>)" >> $BASH_ENV
      # echo "export GLIBC_VER=$(cat << pipeline.parameters.glibc_version_file >>)" >> $BASH_ENV

jobs:
    build-n-test:
      executor: base
      environment:
        <<: *default-env-vars
      steps:
        - attach_workspace: { at: "." }
        - setup_remote_docker
        - run:
            <<: *dynamic-env-vars
        - run:
            name: "Build container image and test"
            command: |
              echo "building ${DH_IMG}"
              docker build --rm --no-cache \
                -t "${DH_IMG}" \
                --build-arg ALPINE_VER --build-arg GLIBC_VER --target "release" \
                --progress plain  .
        - run:
            name: "Build Alpine glibc against AWS CLI"
            command: |
              DH_IMG="${DH_IMG}-aws-cli"
              echo "building ${DH_IMG}"
              docker build --rm -t "${DH_IMG}" \
                --build-arg ALPINE_VER --build-arg GLIBC_VER \
                --progress plain  tests/aws-cli
              docker rmi "${DH_IMG}"
        - run:
            name: "Build Alpine glibc against NodeJS"
            command: |
              DH_IMG="${DH_IMG}-nodejs"
              echo "building ${DH_IMG}"
              docker build --rm -t "${DH_IMG}" \
                --build-arg ALPINE_VER --build-arg GLIBC_VER \
                --build-arg NODE_VER --build-arg NODE_DISTRO \
                --build-arg NODE_HOME \
                --progress plain  tests/nodejs
              docker rmi "${DH_IMG}"
        - run:
            name: "Cleanup container images"
            command: |
              docker ps -a
              docker images
              docker rmi "${DH_IMG}"

    fetch-code:
      executor: go-get-latest
      steps:
        - checkout
        - run:
            name: "Get Alpine & Go latest versions"
            command: |
              go-get-latest alpine > << pipeline.parameters.alpine_version_file >>
              go-get-latest alpine-glibc > << pipeline.parameters.glibc_version_file >>
              cat << pipeline.parameters.alpine_version_file >>
              echo ""
              cat << pipeline.parameters.glibc_version_file >>
        - persist_to_workspace:
            root: .
            paths: [ ./* ]

    publish-image:
      executor: base
      environment:
        <<: *default-env-vars
      steps:
        - attach_workspace: { at: "." }
        - setup_remote_docker
        - run:
            <<: *dynamic-env-vars
        - run:
            name: Push Docker image
            command: |
              export DH_IMAGE="${DH_IMG_REPO}:${ALPINE_VER}-${GLIBC_VER}"
              echo "${DH_PASS}" | docker login -u "${DH_USER}" --password-stdin
              echo ""
              echo ""
              echo "Building ${DH_IMAGE}"
              docker build --rm --no-cache \
                  -t "${DH_IMG_REPO}:${ALPINE_VER}-${GLIBC_VER}" \
                  --build-arg ALPINE_VER --build-arg GLIBC_VER \
                  --target "release" .
              echo ""
              echo ""
              echo "Pushing ${DH_IMAGE}"
              docker push "${DH_IMAGE}"
              echo ""
              echo ""
              echo "Cleanup ${DH_IMAGE}"
              docker rmi "${DH_IMAGE}"

workflows:
  quality-control: # Run on all branches and PRs except main|auto-*
    jobs:
      - fetch-code:
          context:
            - << pipeline.parameters.secrets >>
            - << pipeline.parameters.secrets_docker >>
          filters: { branches: { ignore: /main|auto-update-changelog/ } }
      - build-n-test:
          context: << pipeline.parameters.secrets >>
          requires: [ fetch-code ]
  # Run on the trunk branch only and acts a controller as code is merged
  # to help decide which workflow executes.
  workflow-selector:
    when:
      and:
        - equal: ["workflow-selector", << pipeline.parameters.triggered_flow >>]
        - equal: [ main, << pipeline.git.branch >> ]
    jobs:
      - vr/workflow-selector:
          context: << pipeline.parameters.secrets >>
          ssh_finger: << pipeline.parameters.ssh_finger >>

  publish-changelog:
    when:
      and:
        - equal: ["publish-changelog", << pipeline.parameters.triggered_flow >>]
    jobs:
      - vr/publish-changelog:
          context: << pipeline.parameters.secrets >>
          ssh_finger: << pipeline.parameters.ssh_finger >>

  publish-release-tag:
    when:
      and:
        - equal: ["publish-release-tag", << pipeline.parameters.triggered_flow >>]
    jobs:
      - vr/tag-and-release:
          context: << pipeline.parameters.secrets >>

  on-tag-release:
    jobs:
      - fetch-code:
          context:
            - << pipeline.parameters.secrets >>
            - << pipeline.parameters.secrets_docker >>
          filters:
            <<: *filter-semantic-tag
      - publish-image:
          context: << pipeline.parameters.secrets_docker >>
          filters:
            <<: *filter-semantic-tag
          requires: [ fetch-code  ]

  scheduled-weekly-check:
    when:
      and:
        - equal: ["scheduled-weekly-check", << pipeline.parameters.triggered_flow >>]
        - equal: [ main, << pipeline.git.branch >> ]
    jobs:
      - fetch-code:
          context:
            - << pipeline.parameters.secrets >>
            - << pipeline.parameters.secrets_docker >>
      - build-n-test:
          context: << pipeline.parameters.secrets >>
          requires: [ fetch-code ]
      - publish-image:
          context: << pipeline.parameters.secrets_docker >>
          requires: [ build-n-test ]
