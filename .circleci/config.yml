version: 2.1

orbs:
  vro: kohirens/version-release@2.3.5

parameters:
  secrets:
    default: kohirens-automation
    description: Secrets context
    type: string
  secrets_docker:
    default: kohirens-automation-dockerhub
    description: Secrets context
    type: string
  ssh_finger:
    description: SSH fingerprint.
    type: string
    default: "f0:13:c2:86:18:f4:18:93:d5:d7:31:cc:02:39:32:9e"
  triggered_by_bot:
    default: false
    description: Trigger publishing a release tag workflow.
    type: boolean

# Anchors
executors:
  base:
    docker: # see https://circleci.com/developer/images/image/cimg/base#how-this-image-works
      - image: cimg/base:2023.04
        auth:
          username: ${DH_USER}
          password: ${DH_PASS}
    resource_class: small
  go-get-latest:
    docker: # see https://github.com/kohirens/go-get-latest
      - image: kohirens/go-get-latest:0.4.0
        auth:
          username: ${DH_USER}
          password: ${DH_PASS}
    resource_class: small

default-env-vars: &default-env-vars
    DH_IMG_REPO: "kohirens/alpine-glibc"
    DOCKER_BUILDKIT: 1

filter-semantic-tag: &filter-semantic-tag
  tags:
    only: /^v?\d+\.\d+\.\d+$/
  branches:
    ignore: /.*/

jobs:
    build-n-test:
      executor: base
      environment:
        <<: *default-env-vars
      steps:
        - attach_workspace: { at: "." }
        - setup_remote_docker
        - run:
            name: "Build Docker image"
            command: |
              export ALPINE_VER=$(cat alpine-version.txt)
              export GLIBC_VER=$(cat alpine-glibc-version.txt)
              echo "building alpine-${ALPINE_VER}-glibc-${GLIBC_VER}"
              docker build --rm --no-cache -t "${DH_IMG_REPO}" \
                --build-arg ALPINE_VER --build-arg GLIBC_VER --target "release" \
                --progress plain  .
        - run:
            name: "Test Docker image"
            command: |
              docker run -it --rm "${DH_IMG_REPO}" ls -la /usr/glibc-compat

    fetch-code:
      executor: go-get-latest
      steps:
        - checkout
        - run:
            name: "get alpine latest"
            command: |
              go-get-latest alpine > alpine-version.txt
              go-get-latest alpine-glibc > alpine-glibc-version.txt
        - persist_to_workspace:
            root: .
            paths: [ ./* ]

    publish-image:
      executor: base
      environment:
        <<: *default-env-vars
      steps:
        - attach_workspace: { at: "." }
        - setup_remote_docker
        - run:
            name: Push Docker image
            command: |
              export ALPINE_VER=$(cat alpine-version.txt)
              export GLIBC_VER=$(cat alpine-glibc-version.txt)
              echo "Publishing tag << pipeline.git.tag >>"
              export BUILD_VER="<< pipeline.git.tag >>"
              if [ -z "${BUILD_VER}" ]; then
                  echo "cannot publish a Docker image, release-tag is empty"
                  exit 1
              fi
              export DH_IMAGE="${DH_IMG_REPO}:${GLIBC_VER}"
              echo "${DH_PASS}" | docker login -u "${DH_USER}" --password-stdin
              echo ""
              echo ""
              echo "Building ${DH_IMAGE}"
              docker build --rm \
                  -t "${DH_IMAGE}" \
                  -t "${DH_IMG_REPO}:${ALPINE_VER}-${GLIBC_VER}" \
                  --build-arg ALPINE_VER --build-arg GLIBC_VER \
                  --target "release" .
              echo ""
              echo ""
              echo "Building ${DH_IMAGE}"
              docker push "${DH_IMAGE}"
              docker push "${DH_IMG_REPO}:${ALPINE_VER}-${GLIBC_VER}"
              echo ""
              echo ""
              echo "Building ${DH_IMAGE}"
              docker rmi "${DH_IMAGE}"

workflows:
  quality-control: # Run on all branches and PRs except main|auto-*
    jobs:
      - fetch-code:
          context:
            - << pipeline.parameters.secrets >>
            - << pipeline.parameters.secrets_docker >>
          filters: { branches: { ignore: /main|auto-update-changelog/ } }
      - build-n-test:
          context: << pipeline.parameters.secrets >>
          requires: [ fetch-code ]

  publish-changelog:
    when:
      and:
        - equal: [main, << pipeline.git.branch >>]
        - equal: [webhook, << pipeline.trigger_source >>]
    jobs:
        - vro/publish-changelog:
            context: << pipeline.parameters.secrets >>
            ssh_finger: << pipeline.parameters.ssh_finger >>

  publish-release-tag:
    when:
      and:
        - equal: [main, << pipeline.git.branch >>]
        - << pipeline.parameters.triggered_by_bot >>
    jobs:
      - vro/tag-and-release:
          context: << pipeline.parameters.secrets >>

  on-tag-release:
    jobs:
      - fetch-code:
          context: << pipeline.parameters.secrets_docker >>
          filters:
            <<: *filter-semantic-tag
      - publish-image:
          context: << pipeline.parameters.secrets_docker >>
          filters:
            <<: *filter-semantic-tag
          requires: [ fetch-code  ]


